let db;function getDB(){return db||(db=new Promise((e,t)=>{const r=indexedDB.open("keyval-store",1);r.onerror=(()=>t(r.error)),r.onupgradeneeded=(()=>r.result.createObjectStore("keyval")),r.onsuccess=(()=>e(r.result))})),db}async function withStore(e,t){const r=await getDB();return new Promise((o,n)=>{const s=r.transaction("keyval",e);s.oncomplete=o,s.onerror=(()=>n(s.error)),t(s.objectStore("keyval"))})}class idbKeyval{static get(e){return withStore("readonly",t=>t.get(e)).then(e=>e.result)}static set(e,t){return withStore("readwrite",r=>r.put(t,e))}static delete(e){return withStore("readwrite",t=>t.delete(e))}static clear(){return withStore("readwrite",e=>e.clear())}static keys(){var e=[];return withStore("readonly",t=>{(t.openKeyCursor||t.openCursor).call(t).onsuccess=function(){this.result&&(e.push(this.result.key),this.result.continue())}}).then(()=>e)}}export default idbKeyval;
